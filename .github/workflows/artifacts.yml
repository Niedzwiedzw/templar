name: Build Artifacts
on: push

jobs:
  build-linux:
    name: Build Linux Artifacts

    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            build-options: []
          - target: x86_64-unknown-linux-musl
            build-options: []
          - target: aarch64-unknown-linux-gnu
            build-options: [cross]
          - target: aarch64-unknown-linux-musl
            build-options: [cross]
          - target: armv7-unknown-linux-gnueabihf
            build-options: [cross]

    runs-on: 'ubuntu-latest'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: '${{ matrix.target }}'
          override: true
          default: true

      - name: 'Build binary for ${{ matrix.target }}'
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ contains(matrix.build-options, 'cross') }}
          command: build
          args: '--all-features --target ${{ matrix.target }} --release'

      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/templar

  package-linux:
    name: Package Linux Artifacts
    runs-on: 'ubuntu-latest'
    needs: ['build-linux']
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-unknown-linux-musl
          - target: aarch64-unknown-linux-gnu
          - target: aarch64-unknown-linux-musl
          - target: armv7-unknown-linux-gnueabihf

    steps:
      - name: Pull ${{ matrix.target }}
        uses: actions/download-artifact@master
        with:
          name: ${{ matrix.target }}

      - name: Package tarball
        run: |-
          ls -al
          tar -cvJf 'templar-${{ matrix.target }}.tar.xz' templar
          ls -al

  build-windows:
    name: Build Windows Artifacts

    strategy:
      matrix:
        include:
          - toolchain: stable-msvc
            target: x86_64-pc-windows-msvc
          - toolchain: stable
            target: x86_64-pc-windows-gnu

    runs-on: 'windows-latest'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: '${{ matrix.target }}'
          override: true
          default: true

      - name: 'Build binary for ${{ matrix.target }}'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: '--all-features --target ${{ matrix.target }} --release'

      - name: Upload Windows artifact
        uses: actions/upload-artifact@master
        with:
          name: '${{ matrix.target }}'
          path: target/${{ matrix.target }}/release/*.exe

  build-macos:
    name: Build Mac Artifacts
    runs-on: 'macos-latest'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: 'x86_64-apple-darwin'

      - name: 'Build binary for x86_64-apple-darwin'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: '--all-features --release'

      - name: Upload Mac artifact
        uses: actions/upload-artifact@master
        with:
          name: x86_64-apple-darwin
          path: target/release/templar
