name: Build Artifacts
on: push

jobs:
  build-unix:
    name: Build Linux Artifacts

    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-unknown-linux-musl
          - target: aarch64-unknown-linux-gnu
          - target: aarch64-unknown-linux-musl
          - target: armv7-unknown-linux-gnueabihf

    runs-on: 'ubuntu-latest'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: '${{ matrix.target }}'
          override: true
          default: true

      - name: 'Build binary for ${{ matrix.target }}'
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ contains(matrix.build-options, 'cross') }}
          command: build
          args: '--all-features --target ${{ matrix.target }} --release'

      - name: 'Install cargo-strip'
        run: |-
          cargo install cargo-strip --debug
          cargo install cargo-deb --debug
          cargo strip --target ${{ matrix.target }} || true
          mkdir -p 'target/package'
          tar -C 'target/${{ matrix.target }}/release/' -cvJf 'target/package/templar-${{ matrix.target }}.tar.xz' 'templar'
          cp -rf target/${{ matrix.target }}/release target/release
          cargo deb --no-build --no-strip -o 'target/package/templar-${{ matrix.target }}.deb --target ${{ matrix.target }}'

      - name: Upload tarball
        uses: actions/upload-artifact@master
        with:
          name: linux-tarball
          path: target/package/templar-${{ matrix.target }}.tar.xz

      - name: Upload debian artifact
        uses: actions/upload-artifact@master
        with:
          name: linux-deb
          path: target/package/templar-${{ matrix.target }}.deb

  build-windows:
    name: Build Windows Artifacts

    strategy:
      matrix:
        include:
          - toolchain: stable-msvc
            target: x86_64-pc-windows-msvc
          - toolchain: stable
            target: x86_64-pc-windows-gnu

    runs-on: 'windows-latest'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: '${{ matrix.target }}'
          override: true
          default: true

      - name: 'Build binary for ${{ matrix.target }}'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: '--all-features --target ${{ matrix.target }} --release'

  build-macos:
    name: Build Mac Artifacts
    runs-on: 'macos-latest'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: 'x86_64-apple-darwin'

      - name: 'Build binary for x86_64-apple-darwin'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: '--all-features --release'
