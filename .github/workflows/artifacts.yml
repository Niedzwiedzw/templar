name: Publish Artifacts
on: push

jobs:
  build:
    name: Publish release artifacts

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            toolchain: stable
            target: x86_64-unknown-linux-gnu
            build-options: ['strip']
            package-formats: ['tar.xz', 'deb']
            ext: ''
          - os: ubuntu-latest
            toolchain: stable
            target: x86_64-unknown-linux-musl
            build-options: ['cross']
            package-formats: ['tar.xz', 'deb']
            ext: ''
          - os: ubuntu-latest
            toolchain: stable
            target: aarch64-unknown-linux-gnu
            build-options: ['cross']
            package-formats: ['tar.xz']
            ext: ''
          - os: ubuntu-latest
            toolchain: stable
            target: aarch64-unknown-linux-musl
            build-options: ['cross']
            package-formats: ['tar.xz']
            ext: ''
          - os: ubuntu-latest
            toolchain: stable
            target: armv7-unknown-linux-gnueabihf
            build-options: ['cross']
            package-formats: ['tar.xz']
            ext: ''
          - os: windows-latest
            toolchain: stable-msvc
            target: x86_64-pc-windows-msvc
            build-options: []
            package-formats: []
            ext: '.exe'
          - os: windows-latest
            toolchain: stable
            target: x86_64-pc-windows-gnu
            build-options: []
            package-formats: []
            ext: '.exe'
          - os: macos-latest
            toolchain: stable
            target: x86_64-apple-darwin
            build-options: []
            package-formats: []
            ext: ''

    runs-on: '${{ matrix.os }}'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: '${{ matrix.target }}'
          override: true

      - name: 'Build binary for ${{ matrix.target }}'
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ contains(matrix.build-options, 'cross') }}
          command: build
          args: '--all-features --target ${{ matrix.target }} --release'

      - name: 'Install cargo-strip'
        uses: actions-rs/cargo@v1
        if: contains(matrix.build-options, 'strip')
        with:
          use-cross: ${{ contains(matrix.build-options, 'cross') }}
          command: install
          args: 'cargo-strip'

      - name: 'Strip build binaries'
        uses: actions-rs/cargo@v1
        if: contains(matrix.build-options, 'strip')
        with:
          use-cross: ${{ contains(matrix.build-options, 'cross') }}
          command: strip
          args: '--target ${{ matrix.target }}'

      - name: Create tar.xz package
        if: contains(matrix.package-formats, 'tar.xz')
        run: |-
              mkdir -p 'target/package'
              tar -C 'target/${{ matrix.target }}/release/' -cvJf 'target/package/templar-${{ matrix.target }}.tar.xz' 'templar'

      - name: Upload tar.xz artifact
        uses: actions/upload-artifact@master
        if: contains(matrix.package-formats, 'tar.xz')
        with:
          name: tar-package
          path: target/package/templar-${{ matrix.target }}.tar.xz

      - name: 'Install cargo-deb'
        uses: actions-rs/cargo@v1
        if: contains(matrix.package-formats, 'deb')
        with:
          command: install
          args: 'cargo-deb'

      - name: 'Create debian artifact'
        uses: actions-rs/cargo@v1
        if: contains(matrix.package-formats, 'deb')
        with:
          command: deb
          args: |-
            --no-build --no-strip -o 'target/package/templar-${{ matrix.target }}.deb --target ${{ matrix.target }}'

      - name: Upload debian artifact
        uses: actions/upload-artifact@master
        if: contains(matrix.package-formats, 'deb')
        with:
          name: tar-package
          path: target/package/templar-${{ matrix.target }}.deb
