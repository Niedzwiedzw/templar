// Whitespace
any_ws = _{ " " | "\t" | "\n" | "\r" }
ws = _{ any_ws* }
wsp = _{ any_ws+ }

// Base file
file = _{ SOI ~ content* ~ EOI }
content = _{ ws ~ (task_block | set_value | set_template) ~ ws }

// Top level constructs
task_block = { annotation* ~ "task" ~ wsp ~ ident ~ args ~ ws ~ curly_block }
set_value = { ident ~ ws ~ ":=" ~ ws ~ literal ~ ws ~ end_statement }
set_template = { ident ~ ws ~ "?=" ~ ws ~ string_lit ~ ws ~ end_statement }

// Blocks
curly_block = _{ "{" ~ ws ~ block_content ~ ws ~ "}" }
block_content = { (!"}" ~ ANY)* }

// Annotations
annotation = _{ ws ~ (annotation_when | annotation_after | annotation_always) ~ ws }
annotation_when = { "@when" ~ ws ~ "(" ~ (!")" ~ ANY)* ~ ")" }
annotation_produces = { "@produces" ~ ws ~ "(" ~ (!")" ~ ANY)* ~ ")" }
annotation_after = { "@after" ~ ws ~ "(" ~ (!")" ~ ANY)* ~ ")" }
annotation_always = { "@always" ~ ws ~ "(" ~ (!")" ~ ANY)* ~ ")" }

// Expressions and expression containers
expression        = _{ ws ~ (inner | literal | value) ~ ws }
expression_cap    = !{ expression }
expression_vararg = _{ (expression_cap ~ ("," ~ expression_cap)*)? }
inner             = _{ "(" ~ expression_cap ~ ")" }
args              = _{ "(" ~ expression_vararg ~ ")" }

// Flow control
end_statement = _{ ";" }

// Identifiers
ident      = ${ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*? }
value_key  = ${ "[" ~ string_lit ~ "]"}
value_id   = _{ ( "." ~ ident) | value_key }
root_ident = _{ "." }
value      = @{ (ident | root_ident) ~ (value_id)* }

// Literals
literal_cap = ${ literal }
literal     = _{ bool_lit | number_lit | string_lit | null_lit | array_lit | map_lit }
bool_lit    = _{ true_lit | false_lit }

true_lit    = @{ "true" | "yes" }
false_lit   = @{ "false" | "no" }
null_lit    = @{ "null" | "nil" }
number_lit  = @{ "-"? ~ ASCII_DIGIT+ }

string_lit   = ${ ("'" ~ str_single ~ "'") | ("\"" ~ str_double ~ "\"") | ("`" ~ str_backtick ~ "`") }
str_single   = @{ (!"'" ~ ("\\'" | ANY))* }
str_double   = @{ (!"\"" ~ ("\\\"" | ANY))* }
str_backtick = @{ (!"`" ~ ("\\`" | ANY))* }

array_lit   = @{ "[" ~ ws ~ expression_vararg ~ ws ~ "]"}

map_lit     = @{ "{" ~ ws ~ (map_kvp ~ ws ~ ("," ~ ws ~ map_kvp)*)? ~ ws ~ "}" }
map_kvp     = _{ literal_cap ~ ws ~ ":" ~ ws ~ expression_cap }
